{
  
    
        "post0": {
            "title": "Title",
            "content": ". #엔터를 입력할때까지 반복하여 사용자로부터 물건이름과 개수를 입력받는다 #만약 물건 이름이 존재하지않으면 추가하고 존재하면 물건개수를 더한다 #if~else구조를 사용 #입력이 끝나면 재고 현황을 물건이름의 오름차순으로 정렬하여 출력한다. #while문을 사용하여 반복 #물건이름과 개수가 쌍을 이루니까 딕셔너리를 사용, key를 물건이름으로 사용 # #물건이름:product, 개수:num while True: product=input(&#39;물건이름:&#39;) if product==&#39;&#39;: break number=int(input(&#39;개수:&#39;)) . 물건이름:껌 개수:3 물건이름:과자 개수:100 . d_li={} #물건이름:name, 개수:num while True: name=input(&#39;물건이름&#39;) if name ==&#39;&#39;: break num=int(input(&#39;num:&#39;)) if name in d_li.keys(): d_li[name]+= num else: d_li[name]=num print(d_li) #오름차순정렬 for key,value in sorted(d_li.items()): print(key,value,end=&#39;&#39;) . #set_name={value0,value2,...,valueN} #자료들이 순서와 중복없이 저장된 것 #중괄호{}안에 요소를 쉼표로 구분하여 나열한다 set_wish = set([&#39;새우깡&#39;,&#39;오감자&#39;,&#39;양파링&#39;,&#39;포카칩&#39;,&#39;양파링&#39;]) set_wish . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . #집합명={요소1,요소2,...,요소N} #중괄호 #집합명=set([요소1,요소2,...,요소N]) #set([]) set_wish = {&#39;새우깡&#39;,&#39;오감자&#39;,&#39;양파링&#39;,&#39;포카칩&#39;,&#39;양파링&#39;} set_wish . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . #집합자료형에 저장된 값을 인덱싱으로 접근하려면 리스트나 #튜플로 변환하여 사용한다. set_wish={&#39;새우깡&#39;,&#39;오감자&#39;,&#39;양파링&#39;,&#39;포카칩&#39;,&#39;양파링&#39;} list_5=tuple(set_wish) print(list_5) print(list_5[2]) . (&#39;포카칩&#39;, &#39;오감자&#39;, &#39;새우깡&#39;, &#39;양파링&#39;) 새우깡 . set_wish={&#39;새우깡&#39;,&#39;오감자&#39;,&#39;양파링&#39;,&#39;포카팁&#39;,&#39;양파링&#39;} list_1=list(set_wish) print(list_1) print(list_1[2]) #인덱스 두번째 항목이 나와 (0,1,2,3,4) . [&#39;포카팁&#39;, &#39;오감자&#39;, &#39;새우깡&#39;, &#39;양파링&#39;] 새우깡 . #합집합 a|b (원화기호) #교집합a&amp;b #차집합a-b li1 = {&#39;빼빼로&#39;,&#39;칸초&#39;,&#39;허니버터&#39;} li2 ={&#39;허니버터&#39;,&#39;포카칩&#39;,&#39;새우깡&#39;} #합집합 print(li1.union(li2)) print(li1|li2) #교집합 print(li1.intersection(li2)) print(li1&amp;li2) #차집합 print(li1.difference(li2)) print(li1-li2) print(li2.difference(li1)) print(li2-li1) . {&#39;허니버터&#39;, &#39;칸초&#39;, &#39;새우깡&#39;, &#39;빼빼로&#39;, &#39;포카칩&#39;} {&#39;허니버터&#39;, &#39;칸초&#39;, &#39;새우깡&#39;, &#39;빼빼로&#39;, &#39;포카칩&#39;} {&#39;허니버터&#39;} {&#39;허니버터&#39;} {&#39;빼빼로&#39;, &#39;칸초&#39;} {&#39;빼빼로&#39;, &#39;칸초&#39;} {&#39;포카칩&#39;, &#39;새우깡&#39;} {&#39;포카칩&#39;, &#39;새우깡&#39;} . sweety = {&#39;chocolate&#39;, &#39;jelly&#39;, &#39;caramel&#39;} salty = {&#39;potatochip&#39;, &#39;honeybutterchip&#39;, &#39;chichenpop&#39;, &#39;caramel&#39;} # 합집합 print(sweety.union(salty)) print(sweety|salty) # 교집합 print(sweety.intersection(salty)) print(sweety&amp;salty) # 차집합 print(sweety.difference(salty)) print(sweety-salty) print(salty.difference(sweety)) print(salty-sweety) . {&#39;potatochip&#39;, &#39;chocolate&#39;, &#39;chichenpop&#39;, &#39;caramel&#39;, &#39;honeybutterchip&#39;, &#39;jelly&#39;} {&#39;potatochip&#39;, &#39;chocolate&#39;, &#39;chichenpop&#39;, &#39;caramel&#39;, &#39;honeybutterchip&#39;, &#39;jelly&#39;} {&#39;caramel&#39;} {&#39;caramel&#39;} {&#39;chocolate&#39;, &#39;jelly&#39;} {&#39;chocolate&#39;, &#39;jelly&#39;} {&#39;potatochip&#39;, &#39;chichenpop&#39;, &#39;honeybutterchip&#39;} {&#39;potatochip&#39;, &#39;chichenpop&#39;, &#39;honeybutterchip&#39;} . set_wish={&#39;새우깡&#39;,&#39;오감자&#39;,&#39;양파링&#39;,&#39;포카칩&#39;,&#39;양파링&#39;} set_wish.add(&#39;허니버터&#39;) set_wish . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;오감자&#39;, &#39;포카칩&#39;, &#39;허니버터&#39;} . set_wish={&#39;새우깡&#39;,&#39;오감자&#39;,&#39;양파링&#39;,&#39;포카칩&#39;,&#39;양파링&#39;} set_wish.remove(&#39;오감자&#39;) set_wish . {&#39;새우깡&#39;, &#39;양파링&#39;, &#39;포카칩&#39;} . set_wish={&#39;새우깡&#39;,&#39;오감자&#39;,&#39;양파링&#39;,&#39;포카칩&#39;,&#39;양파링&#39;} if &#39;새우깡&#39; in list(set_wish): set_wish.remove(&#39;새우깡&#39;) set_wish . {&#39;양파링&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . #name error :참조변수없음 #syntaxerror:문법이 잘못되었음(오타, 괄호를제대로 닫지 않았을때,콜론(:)을 잘못 사용했을때 등등 #type error:타입이 맞지 않음,형태오류 #zerodivisionerror: 0으로 나눌수 없음 #indentaionerror:들여쓰기오류, 줄맞추기 ^로 표시해줌 . #순차구조-명령들이 순차적으로 실행되는 구조 #선택구조-조건에 따라 명령을 선택하여 실행되는 구조 #반복구조-동일한 명령이 반복되면서 실행되는 구조 (해당하는 조건을 만족했을때 계속 실행) . #1)조건일때만 실행 -해열제를 먹이세요 #2)조건일때와 아닐때로 분기-비가오면, 비가 안오면, #3)조건이 여러개일때 . #if #if 조건: #명령어 #if 열이 난다면: #해열제를 먹이세요 #if~else #if 조건: 명령어 #else:명령어 #if 비가 온다면: #영화관에서 만나자 #else: #공원에서 만나자 #if~elif #if조건: #명령어1 #elif 조건: #명령어2 #if 빨간불이면: #멈추세요 #elif 노란불이면: #서행하세요 #elif초록불이면: #주행하세요 #if~elif~else #if조건: #명령어1 #elif조건: #명령어2 #else: #명령어3 #if빨간불이면:멈추세요 elif노란불이면:서행하세요 elif초록불이면:주행하세요 else:신호등 고장 #중첩if #if 조건: #명령어1 #if 조건: #명령어2 #else: #명령어3 #if 빨간불이면:멈추세요 elif . if 조건식: 코드블록 #조건식의 결과가 True이면 이구조내의 코드블록이 실행된다. #true가 아니면 명령문을 건너뛴다 . NameError Traceback (most recent call last) &lt;ipython-input-13-4513a07ba4f0&gt; in &lt;module&gt;() 1 #if 구조 -&gt; 2 if 조건식: 3 코드블록 #조건식의 결과가 True이면 이구조내의 코드블록이 실행된다. 4 #true가 아니면 명령문을 건너뛴다 5 NameError: name &#39;조건식&#39; is not defined . #&gt;콜론 아랫줄부터 들여쓰기 된 부분을 명령문 블록 또는 코드블록이라고 한다 #&gt;들여쓰기 간격은 같아야하며 콜론을 사용하며 #&gt;자동으로 들여쓰기 된 채로 다음줄이 시작된다 a=1 if a&lt;0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다.&#39;) print(&#39;끝&#39;) . 끝 . a=1 if a&lt;0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다.&#39;) print(&#39;끝&#39;) . a는 음수이다. 끝 . #체온을 입력받아 체온이 37.5도 초과이면 &#39;등교불가&#39;를 출력하는 프로그램 temp=float(input(&#39;체온:&#39;)) if temp&gt;37.5: print(&#39;등교불가&#39;) . 체온:38 등교불가 . if 조건식: 코드블록1 else 조건식: 코드볼록2 . File &#34;&lt;ipython-input-17-bf4f48d1c37e&gt;&#34;, line 4 else 조건식: ^ SyntaxError: invalid syntax . a=5 b=4 if a%b == 0: print(f&#39;{a}는{b}로 나누어 떨어집니다&#39;) else: print(f&#39;{a}는 {b}로 나머지가 {a % b} 입니다&#39;) . 5는 4로 나머지가 1 입니다 . #자가격리 여부에 따라 등교가능 여부를 알려주는 프로그램 #체온, 검사결과 대기여부, 자가격리여부를 입력받아 다음과 같은 조건으로 가능여부 출력 #만약 체온이 37.5도 초과이면 &#39;발열기준초과:등교불가&#39;를 출력합니다 #아니고, 만약 검사대기여부가&#39;y&#39;이면&#39;검사대기중 등교불가&#39;를 출력합니다 #아니고, 만약 자가격리여부가&#39;y&#39;이면&#39;자가격리중 등교불가&#39;를 출력합니다 #모든 조건이 만족하지 않는다면 &#39;등교가능&#39;을 출력합니다. temp = int(input(&#39;체온:&#39;)) chk1 = input(&#39;코로나 검사를 받고 결과를 기다리고 있나요?(y/n):&#39;) chk2 = input(&#39;자가격리중인가요?(y/n):&#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교불가&#39;) elif chk1 == &#39;y&#39; or &#39;Y&#39;: print(&#39;검사대기중 등교불가&#39;) elif chk2 == &#39;y&#39; or &#39;Y&#39;: print(&#39;자가격리중 등교불가&#39;) else: print(&#39;등교가능&#39;) . #점수 입력받고 점수의 범위에 따라 등급을 출력하는 프로그램을 작성 #등급: a,b,c,d,f, #점수:90~100,80~89,70~79, #점수처리 grade=&#39;&#39; score=int(input(&#39;점수:&#39;)) if score&gt;=90: grade=&#39;a&#39; elif score&gt;=80: grade=&#39;b&#39; elif score&gt;=70: grade=&#39;c&#39; elif score&gt;=60: grade=&#39;d&#39; else: grade=&#39;f&#39; print(f&#39;등급:{grade}&#39;) . 점수:44 등급:f . grade=&#39;&#39; score=int(input(&#39;점수:&#39;)) if score &gt;= 90: grade=&#39;A&#39; elif score &gt;= 80: grade = &#39;B&#39; elif score &gt;= 70: grade = &#39;C&#39; elif score &gt;= 60: grade = &#39;D&#39; else: grade = &#39;F&#39; print(f&#39;등급: {grade}&#39;) . 점수:66 등급: D . #물건 구매가를 입력받고, 금액에 따른 할인율을 계산하여 #구매가, 할인율, 할인금액, 지불금액을 출력하는 프로그램을 작성하시오 #할인율 1만원이상5만원미만:5% # 5만원이상 10만원미만:7.5% # 10만원이상:10% buy=0 buy=int(input(&#39;물건 구매가를 입력하세요&#39;)) if buy &gt;= 100000: dc=10 elif buy &gt;= 50000: dc=7.5 elif buy&gt;=10000: dc=5 else: dc=0 print(f&#39;구매가:{buy}원&#39;) print(f&#39;할인율:{dc}%) print(f&#39;구매가:{buy}원&#39;) print(f&#39;구매가:{buy}원&#39;) . #3개의 수를 입력받아 가장 작은 수를 출력하세요 # 입력 #처리 #출력 n1=int(input(&#39;숫자1:&#39;)) n2=int(input(&#39;숫자2:&#39;)) n3=int(input(&#39;숫자3:&#39;)) min_n=min(n1,n2,n3) print(&#39;가장 작은 수:&#39;,min_n) . #논리 연산자를 사용하여 여러개의 조건을 조합하여 복잡한 조건식을 만들수있다 #and, 그리고, 모두 true일때만 true #or, 또는, 하나 이상이 true이면 true #not, false일때만 . # and, or, not print(True and True) print(True and False) print(False and True) print(False and False) print() print(True or True) print(True or False) print(False or True) print(False or False) print() print(not True) print(not False) . True False False False True True True False False True . 1in[1,2,3] . True . &#39;a&#39; in (&#39;a&#39;,&#39;b&#39;,&#39;c&#39;) . True . &#39;j&#39;not in &#39;python&#39; . True . #나이를 입력받아 국립공원 입장권을 발급받는 프로그램을 작성 #입장료는 3000원 #나이가 65세 이상이거나 7세 이하인 경우에는 무료 #나이 8세~ 18세는 청소년 요금인 1000원 age=int(input(&#39;나이를 입력하세요:&#39;)) price=&#39;3000원&#39; if age &gt; 64 or age&lt;= 7: price=&#39;무료&#39; elif age&gt;= 8 and age&lt;=18: price =&#39;1000원&#39; print(f&#39;{price}입니다&#39;) . File &#34;&lt;ipython-input-17-38bb31a86c7d&gt;&#34;, line 9 if age &gt; 64 or &lt;= 7: ^ SyntaxError: invalid syntax . age = int(input(&quot;몇살이세요? : &quot;)) if age &gt;= 65 or age &lt; 7 : print(f&#39;{age}세는 무료입장 가능합니다.&#39;) elif age &gt;= 8 and age &lt;= 18 : print(f&#39;{age}세는 입장요금 1000원 입니다.&#39;) else : print(f&#39;{age}세는 입장요금 3000원 입니다.&#39;) . 몇살이세요? : 4 4세는 무료입장 가능합니다. . #사용자로부터 아이디/패스워드를 받아서 #프로그램에 저장된 아이디/패스워드를 일치하는지 여부 검사하여 #로그인/로그인실패 출력하는 프로그램을 작성해보자 #프로그램에 저장된 아이디/패스워드는 #id: id1234 #패스워드:pwd1234 #로그인 id = &#39;id1234&#39; passward=&#39;pw1234&#39; input_id=input(&#39;아이디:&#39;) input_pwd=input(&#39;패스워드:&#39;) if id == input_id and input_pwd == input_pwd: print(&#39;로그인 성공&#39;) else: print(&#39;로그인 실패&#39;) . 아이디:id1234 패스워드:pw1234 로그인 성공 . # 두 수와 사칙연산기호(+,-,*,/)를 입력받아 연산기호에 따라 연산 결과를 출력하는 프로그램 #입력 #조건문(if) #출력 #나누는 수가 0이면 오류가 남 . num1 = int(input(&#39;숫자1:&#39;)) num2 = int(input(&#39;숫자2:&#39;)) operator=input(&#39;연산기호(+,-,*,/):&#39;) result=0 #처리 if operator==&#39;+&#39;: result=num1+num2 if operator==&#39;-&#39;: result=num1-num2 if operator==&#39;*&#39;: result=num1*num2 if operator==&#39;/&#39;: if num2 !=0: result=num1/num2 else: result=none #출력 print(&#39;-&#39;*30) print(f&#39;{num1} {operator} {num2}={result}&#39;) . 숫자1:3 숫자2:5 연산기호(+,-,*,/):* 3 * 5=15 . #random. #주사위 던지기 게임 #두개의 주사위를 던져 더 큰수가 나오는 사람이 이기는 게임 #주사위 1:1 #주사위 2:3 #주사위 2가 이겼습니다. import random dice1 = int(random.randint(1,6)) dice2 = int(random.randint(1,6)) print(f&#39;주사위1: {dice1}&#39;) print(f&#39;주사위2: {dice2}&#39;) if dice1 &gt; dice2: print(f&#39;주사위1 이 이겼습니다.&#39;) elif dice1 &lt; dice2: print(f&#39;주사위2 가 이겼습니다.&#39;) else: print(&#39;비겼습니다.&#39;) . 주사위1: 2 주사위2: 2 비겼습니다. .",
            "url": "https://lizzy51.github.io/pie56/2021/06/06/_3%ED%8C%80_%EA%B9%80%ED%98%9C%EC%9B%90.html",
            "relUrl": "/2021/06/06/_3%ED%8C%80_%EA%B9%80%ED%98%9C%EC%9B%90.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lizzy51.github.io/pie56/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://lizzy51.github.io/pie56/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://lizzy51.github.io/pie56/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lizzy51.github.io/pie56/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}